Abgabe 1:
    4. benchmark (runtime and memory) your solutions for 1’000, 10’000, 100’000 1’000’000
    queries of length 100. 
    We chose length 40 instead, because our naive algorihm gets no results with the other lengths.

    length 40: illimina__reads_40.fasta.gz
    server compute11:
    aus build ordner: (jedes mal Anzahl queries anpassen)
    
    1000 queries naive search:
        Command being timed: "./bin/naive_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_40.fasta.gz"
        User time (seconds): 2962.17
        System time (seconds): 0.66
        Maximum resident set size (kbytes): 214056

  

    1000 queries suffix array:
        User time (seconds): 35.86
        System time (seconds): 1.20
        Maximum resident set size (kbytes): 604120
       

    10000 queries naive search:
        Command being timed: "./bin/naive_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_40.fasta.gz"
        User time (seconds): 46966.00
        System time (seconds): 6.66
        Maximum resident set size (kbytes): 213668



    10000 queries suffix array: 
        Command being timed: "./bin/suffixarray_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_40.fasta.gz"
        User time (seconds): 35.95
        System time (seconds): 2.17
        Maximum resident set size (kbytes): 605308


    100000 queries suffix array:
        Command being timed: "./bin/suffixarray_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_40.fasta.gz"
        User time (seconds): 34.16
        System time (seconds): 12.00
        Maximum resident set size (kbytes): 603792
        


    1000000 queries suffix array:
        Command being timed: "./bin/suffixarray_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_40.fasta.gz"
        User time (seconds): 38.32
        System time (seconds): 13.55
        Maximum resident set size (kbytes): 627388




    5. Benchmark (runtime) queries of the length 40, 60, 80, and 100 with a suitable number
    of queries. Number of queries chosen: 1000

    for naive search runtime is not meaningful because the algorithm doesnt find occurences with a text length larger than 40

        length 40:
            naive:


            suffix:
                 User time (seconds): 35.86
                System time (seconds): 1.20
                Maximum resident set size (kbytes): 604120
                

        length 60:
            naive:
                Funktioniert ab länge größer als 60 nicht mehr
            suffix:
                	Command being timed: "./bin/suffixarray_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_60.fasta.gz"
                    User time (seconds): 31.11
                    System time (seconds): 1.07
                    Maximum resident set size (kbytes): 605824
            

        length 80:

            suffix:
                Command being timed: "./bin/suffixarray_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_80.fasta.gz"
                User time (seconds): 35.96
                System time (seconds): 0.97
                Maximum resident set size (kbytes): 608600
    

        length 100: 

            suffix:
                Command being timed: "./bin/suffixarray_search --reference ../data/hg38_partial.fasta.gz --query ../data/illumina_reads_100.fasta.gz"
                User time (seconds): 36.02
                System time (seconds): 1.07
                Maximum resident set size (kbytes): 610764


Abgabe 2:

    3. Benchmark (runtime and memory) your solutions for 1’000, 10’000, 100’000 1’000’000
    queries of length 100. we chose length 40 as before, to make comparisons

        1000 queries:
                Command being timed: "./bin/fmindex_search --index myIndex.index --query ../data/illumina_reads_40.fasta.gz"
            User time (seconds): 0.19
            System time (seconds): 0.24
            Maximum resident set size (kbytes): 76912
         

        10000 queries:
        100000 queries:
        1000000 queries:



    4. Which algorithm is best suited?